package com.frontend.mobile.viewactivities

import android.content.Context
import android.widget.Toast
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import com.frontend.mobile.R
import com.frontend.mobile.api.ApiClient
import com.frontend.mobile.api.ApiService
import com.frontend.mobile.model.ActivityDTO
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

@Composable
fun UserAddActivity(navController: NavHostController) {
    val apiService = ApiClient.getClient().create(ApiService::class.java)
    val context = LocalContext.current
    val sharedPreferences = context.getSharedPreferences("app_prefs", Context.MODE_PRIVATE)
    val token = sharedPreferences.getString("authToken", null)
    val userId = sharedPreferences.getLong("userId", -1L)

    var name by remember { mutableStateOf("") }
    var description by remember { mutableStateOf("") }
    var isLoading by remember { mutableStateOf(false) }

    fun saveActivity() {
        if (userId == -1L || token == null) {
            Toast.makeText(context, "User ID or token not found", Toast.LENGTH_SHORT).show()
            return
        }

        if (name.isEmpty() || description.isEmpty()) {
            Toast.makeText(context, "Please fill in all fields", Toast.LENGTH_SHORT).show()
            return
        }

        val activity = ActivityDTO(
            activityId = 0L, // This will be generated by the backend
            name = name,
            description = description,
            weatherCondition = "weather condition" // Set internally
        )

        isLoading = true
        apiService.saveActivity(userId, "Bearer $token", activity).enqueue(object : Callback<ActivityDTO> {
            override fun onResponse(call: Call<ActivityDTO>, response: Response<ActivityDTO>) {
                isLoading = false
                if (response.isSuccessful) {
                    val savedActivity = response.body()
                    if (savedActivity != null) {
                        Toast.makeText(context, "Activity saved successfully", Toast.LENGTH_SHORT).show()
                        // Navigate to ScheduleActivity with the saved activity details
                        navController.navigate("schedule_activity/${savedActivity.activityId}/${savedActivity.name}/${savedActivity.description}")
                    }
                } else {
                    Toast.makeText(context, "Failed to save activity", Toast.LENGTH_SHORT).show()
                }
            }

            override fun onFailure(call: Call<ActivityDTO>, t: Throwable) {
                isLoading = false
                Toast.makeText(context, "Error: ${t.message}", Toast.LENGTH_SHORT).show()
            }
        })
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFA7F0F9))
    ) {
        // Back Button
        IconButton(
            onClick = { navController.popBackStack() },
            modifier = Modifier
                .padding(top = 40.dp, start = 16.dp)
                .align(Alignment.TopStart)
        ) {
            Icon(Icons.Default.ArrowBack, contentDescription = "Back")
        }

        // Logo
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(top = 80.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Image(
                painter = painterResource(id = R.drawable.imagelogo),
                contentDescription = "SkySync Logo",
                modifier = Modifier.height(100.dp)
            )
        }

        // Add Activity Section
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(top = 200.dp, start = 16.dp, end = 16.dp, bottom = 16.dp)
                .align(Alignment.TopCenter),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Text(
                text = "Add Your Own Activity",
                fontSize = 22.sp,
                fontWeight = FontWeight.Bold,
                color = Color.Black,
                modifier = Modifier.padding(bottom = 16.dp)
            )

            OutlinedTextField(
                value = name,
                onValueChange = { name = it },
                label = { Text("Activity Name") },
                modifier = Modifier.fillMaxWidth()
            )

            OutlinedTextField(
                value = description,
                onValueChange = { description = it },
                label = { Text("Activity Description") },
                modifier = Modifier.fillMaxWidth()
            )

            Button(
                onClick = { saveActivity() },
                enabled = !isLoading,
                shape = RoundedCornerShape(12.dp),
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF2D9CDB)),
                modifier = Modifier.fillMaxWidth()
            ) {
                Text(if (isLoading) "Saving..." else "Save Activity", color = Color.White)
            }
        }
    }
}